version: '3.8'

services:
  postgres-usuarios:
    image: postgres
    container_name: postgres-usuarios
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: usuarios_db
    volumes:
      - usuarios-db-data:/var/lib/postgresql/data
    networks:
      - backend

  postgres-pizzas:
    image: postgres
    container_name: postgres-pizzas
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: pizza_db
    volumes:
      - pizzas-db-data:/var/lib/postgresql/data
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3.7.6-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - "TZ=America/Argentina/Buenos_Aires"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - backend

  zipkin:
    image: openzipkin/zipkin:2.23.0
    container_name: zipkin
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "9411:9411"
    environment:
      - "TZ=America/Argentina/Buenos_Aires"
      - "RABBIT_URI=amqp://guest:guest@rabbitmq:5672"
      - "RABBIT_QUEUE=zipkin"
    networks:
      - backend

  eureka-server:
    image: eureka-server
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - "TZ=America/Argentina/Buenos_Aires"
      - "EUREKA_CLIENT=http://eureka-server:8761/eureka/"
    depends_on:
      zipkin:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - backend

  config-server:
    image: config-server
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      - "TZ=America/Argentina/Buenos_Aires"
      - "EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/"
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - backend

  gateway-server:
    image: gateway-server
    build:
      context: ./gateway-server
      dockerfile: Dockerfile
    container_name: gateway-server
    ports:
      - "9000:9000"
    environment:
      - "SPRING_APPLICATION_NAME=gateway-server"
      - "EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    networks:
      - backend

  usuarios:
    image: usuarios
    build:
      context: ./usuarios
      dockerfile: Dockerfile
    container_name: usuarios
    ports:
      - "8080:8080"
    environment:
      - "SPRING_APPLICATION_NAME=usuarios"
      - "SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-usuarios:5432/usuarios_db"
      - "SPRING_DATASOURCE_USERNAME=postgres"
      - "SPRING_DATASOURCE_PASSWORD=secret"
      - "EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/"
      - "SPRING_ZIPKIN_BASE_URL=http://zipkin:9411"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
      - "SPRING_CONFIG_IMPORT=configserver:http://config-server:8888"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgres-usuarios:
        condition: service_started
    networks:
      - backend

  pizza-read:
    image: pizza-read
    build:
      context: ./pizza-read
      dockerfile: Dockerfile
    container_name: pizza-read
    ports:
      - "8082:8082"
    environment:
      - "SPRING_APPLICATION_NAME=pizza-read"
      - "SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-pizzas:5432/pizza_db"
      - "SPRING_DATASOURCE_USERNAME=postgres"
      - "SPRING_DATASOURCE_PASSWORD=secret"
      - "EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/"
      - "SPRING_ZIPKIN_BASE_URL=http://zipkin:9411"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
      - "SPRING_CONFIG_IMPORT=configserver:http://config-server:8888"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgres-pizzas:
        condition: service_started
    networks:
      - backend

  pizza-write:
    image: pizza-write
    build:
      context: ./pizza-write
      dockerfile: Dockerfile
    container_name: pizza-write
    ports:
      - "8081:8081"
    environment:
      - "SPRING_APPLICATION_NAME=pizza-write"
      - "SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-pizzas:5432/pizza_db"
      - "SPRING_DATASOURCE_USERNAME=postgres"
      - "SPRING_DATASOURCE_PASSWORD=secret"
      - "EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/"
      - "SPRING_ZIPKIN_BASE_URL=http://zipkin:9411"
      - "SPRING_CLOUD_CONFIG_URI=http://config-server:8888"
      - "SPRING_CONFIG_IMPORT=configserver:http://config-server:8888"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      postgres-pizzas:
        condition: service_started
    networks:
      - backend

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    networks:
      - backend
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana
    networks:
      - backend

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - backend


volumes:
  usuarios-db-data:
  pizzas-db-data:
  prom_data: {}
  grafana_data:


networks:
  backend:
    driver: bridge