version: '3.7'

services:

    redpanda:
        image: docker.redpanda.com/redpandadata/console
        hostname: redpanda
        container_name: moodle-redpanda
        ports:
            - "8080:8080"
        environment:
            KAFKA_BROKERS: kafka:29092
            KAFKA_TLS_INSECURESKIPTLSVERIFY: true
            KAFKA_SCHEMAREGISTRY_ENABLED: true
            KAFKA_SCHEMAREGISTRY_URLS: http://schema-registry:8081
            KAFKA_SCHEMAREGISTRY_USERNAME: client
            KAFKA_SCHEMAREGISTRY_PASSWORD: client
            KAFKA_SCHEMAREGISTRY_TLS_ENABLED: false
            KAFKA_SCHEMAREGISTRY_TLS_INSECURESKIPTLSVERIFY: true
        depends_on:
            - kafka
            - schema-registry
            - zookeeper
        restart: always
        networks:
            - moodle


    zookeeper:
        image: confluentinc/cp-zookeeper:6.1.1
        hostname: zookeeper
        container_name: moodle-zookeeper
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        restart: always
        networks:
            - moodle

    kafka:
        image: confluentinc/cp-enterprise-kafka:6.1.1
        hostname: kafka
        container_name: moodle-kafka
        tmpfs: /kafka/kafka-logs
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
        environment:
            KAFKA_HEAP_OPTS: -Xmx3G -Xms1G
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
            KAFKA_DELETE_TOPIC_ENABLE: "true"
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_LOG_RETENTION_MS: -1
            KAFKA_MESSAGE_MAX_BYTES: 10485880
            KAFKA_NUM_PARTITIONS: 1
            CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:9092
            CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
            CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
            CONFLUENT_METRICS_ENABLE: "true"
            CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        restart: always
        networks:
            - moodle

    schema-registry:
        image: confluentinc/cp-schema-registry:6.1.1
        container_name: moodle-schema-registry
        ports:
            - "8081:8081"
        environment:
            SCHEMA_REGISTRY_HOST_NAME: schema-registry
            SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
            SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
        depends_on:
            - kafka
        restart: always
        networks:
            - moodle

    enviador-usuarios:
        build: ./enviador-usuarios
        container_name: enviador-usuarios
        restart: always
        ports:
            - "8090:8080"
        environment:
            - "kafka=kafka"
            - "schema-registry=schema-registry"
        networks:
            - moodle

    enviador-entradas:
        build: ./enviador-entradas
        container_name: enviador-entradas
        restart: always
        ports:
            - "8091:8080"
        environment:
            - "kafka=kafka"
            - "schema-registry=schema-registry"
        networks:
            - moodle

    asignador-entradas-usuarios:
        build: ./asignador-entradas-usuarios
        container_name: asignador-entradas-usuarios
        restart: always
        ports:
            - "8095:8080"
        environment:
            - "kafka=kafka"
            - "schema-registry=schema-registry"
        networks:
            - moodle

    agrupador-entradas:
        build: ./agrupador-entradas
        container_name: agrupador-entradas
        restart: always
        ports:
            - "8094:8080"
        environment:
            - "kafka=kafka"
            - "schema-registry=schema-registry"
        networks:
            - moodle

    asignador-pais:
        build: ./asignador-pais
        container_name: asignador-pais
        restart: always
        ports:
            - "8092:8080"
        environment:
            - "kafka=kafka"
            - "schema-registry=schema-registry"
        networks:
            - moodle

    receptor-asignador:
        build: ./receptor-asignador
        container_name: receptor-asignador
        restart: always
        depends_on:
            - db-receptor-asignador
        ports:
            - "8093:8080"
        environment:
            - "kafka=kafka"
            - "schema-registry=schema-registry"
            - "db-receptor-asignador=db-receptor-asignador"
        networks:
            - moodle

    enviador-usuarios-db:
        image: postgres:14.1-alpine
        container_name: enviador-usuarios-db
        restart: always
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
        ports:
            - "5432:5432"
        volumes:
            - db:/var/lib/postgresql/data
        networks:
            - moodle

    db-receptor-asignador:
        image: mongo
        ports:
            - "3302:27017"
        environment:
            - MONGO_INITDB_ROOT_USERNAME=root
            - MONGO_INITDB_ROOT_PASSWORD=admin
            - MONGO_INITDB_ROOT_DATABASE=db_receptor_asignador
        volumes:
            - db-receptor-asignador-data:/data/db
        networks:
            - moodle

    prometheus:
        image: prom/prometheus
        container_name: prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.enable-lifecycle'
        ports:
            - 9090:9090
        networks:
            - moodle
        restart: unless-stopped
        volumes:
            - ./prometheus:/etc/prometheus
            - prom_data:/prometheus

    grafana:
        image: grafana/grafana
        container_name: grafana
        ports:
            - 3000:3000
        restart: unless-stopped
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
        volumes:
            - ./grafana:/etc/grafana/provisioning/datasources
            - grafana_data:/var/lib/grafana
        networks:
            - moodle

    node-exporter:
        image: prom/node-exporter:latest
        container_name: node-exporter
        restart: unless-stopped
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        command:
            - '--path.procfs=/host/proc'
            - '--path.rootfs=/rootfs'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
        expose:
            - 9100
        networks:
            - moodle

    postgres:
        image: postgres:15
        container_name: sonarq-postgres
        networks:
            - moodle
        environment:
            POSTGRES_USER: sonar
            POSTGRES_PASSWORD: sonar
            POSTGRES_DB: sonarqube
        volumes:
            - postgres_data:/var/lib/postgresql/data

    sonarqube:
        image: sonarqube:lts
        container_name: sonarq
        networks:
            - moodle
        depends_on:
            - postgres
        ports:
            - "9000:9000"
        environment:
            SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonarqube
            SONAR_JDBC_USERNAME: sonar
            SONAR_JDBC_PASSWORD: sonar
        volumes:
            - sonarqube_data:/opt/sonarqube/data
            - sonarqube_logs:/opt/sonarqube/logs
            - sonarqube_extensions:/opt/sonarqube/extensions
            - sonarqube_conf:/opt/sonarqube/conf

volumes:
    db:
    db-receptor-asignador-data:
    prom_data: {}
    postgres_data:
    sonarqube_data:
    sonarqube_logs:
    sonarqube_extensions:
    sonarqube_conf:
    grafana_data:

networks:
    moodle:
        driver: bridge
